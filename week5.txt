import numpy as np
def unitstep(v):
    if v >= 0:
        return 1
    else:
        return 0
def perceptronModel(x,w,b):
    v=np.dot(w,x)+b
    y=unitstep(v)
    return y
def OR_logicFunction(x):
    w=np.array([1,1])
    b=-0.5
    return perceptronModel(x,w,b)
def AND_logicFunction(x):
    w=np.array([1,1])
    b=-1.5
    return perceptronModel(x,w,b)
def NAND_logicFunction(x):
    w=np.array([1,1])
    b=-2.5
    return perceptronModel(x,w,b)
def NOR_logicFunction(x):
    w=np.array([1,1])
    b=-3.5
    return perceptronModel(x,w,b)
test1=np.array([0,1])
test2=np.array([1,1])
test3=np.array([0,0])
test4=np.array([1,0])
print("OR({},{})={}".format(0,1,OR_logicFunction(test1)))
print("OR({},{})={}".format(1,1,OR_logicFunction(test2)))
print("OR({},{})={}".format(0,0,OR_logicFunction(test3)))
print("OR({},{})={}".format(1,0,OR_logicFunction(test4)))

print("AND({},{})={}".format(0,1,AND_logicFunction(test1)))
print("AND({},{})={}".format(1,1,AND_logicFunction(test2)))
print("AND({},{})={}".format(0,0,AND_logicFunction(test3)))
print("AND({},{})={}".format(1,0,AND_logicFunction(test4)))

print("NAND({},{})={}".format(0,1,NAND_logicFunction(test1)))
print("NAND({},{})={}".format(1,1,NAND_logicFunction(test2)))
print("NAND({},{})={}".format(0,0,NAND_logicFunction(test3)))
print("NAND({},{})={}".format(1,0,NAND_logicFunction(test4)))

print("NOR({},{})={}".format(0,1,NOR_logicFunction(test1)))
print("NOR({},{})={}".format(1,1,NOR_logicFunction(test2)))
print("NOR({},{})={}".format(0,0,NOR_logicFunction(test3)))
print("NOR({},{})={}".format(1,0,NOR_logicFunction(test4)))
